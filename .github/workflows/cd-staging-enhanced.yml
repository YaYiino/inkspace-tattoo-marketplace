name: Deploy to Staging (Enhanced)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean
      skip_tests:
        description: 'Skip post-deployment tests'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20'
  FORCE_COLOR: '1'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

jobs:
  # Run CI checks first
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ci-checks]
    if: success() || github.event.inputs.force_deploy == 'true'
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.url }}
    outputs:
      deployment_url: ${{ steps.deployment.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.STAGING_APP_URL }}
          NEXT_PUBLIC_ENABLE_ANALYTICS: false
          NEXT_PUBLIC_ENABLE_ERROR_REPORTING: true
          NEXT_PUBLIC_DEBUG_MODE: true

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt

      - name: Get deployment URL
        id: deployment
        run: echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Update staging database
        run: |
          # Run database migrations for staging
          npm run db:migrate:staging || echo "Migration failed, continuing..."
          # Seed staging database with test data
          npm run db:seed:staging || echo "Seeding failed, continuing..."
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
          NODE_ENV: staging

      - name: Run smoke tests
        run: |
          echo "Waiting for deployment to be ready..."
          for i in {1..20}; do
            if curl -f -s ${{ steps.deployment.outputs.url }}/api/health > /dev/null; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i/20: Deployment not ready yet, waiting..."
            sleep 15
          done

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🚀 Staging deployment')
            );
            
            const body = `🚀 **Staging deployment ready!**
            
            **Preview URL:** ${{ steps.deployment.outputs.url }}
            **Branch:** \`${{ github.head_ref }}\`
            **Commit:** ${{ github.sha }}
            
            **What's included:**
            - ✅ Code changes deployed
            - ✅ Database migrations applied  
            - ✅ Staging environment configured
            
            **Next steps:**
            - Review the changes on staging
            - Run manual testing if needed
            - Automated tests will run shortly
            
            ---
            *Updated at: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - name: Notify Slack on success
        if: success() && github.ref == 'refs/heads/develop'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            🚀 **Staging deployment successful!**
            
            **URL:** ${{ steps.deployment.outputs.url }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** `${{ github.sha }}`
            **Author:** ${{ github.actor }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Automated testing on staging
  staging-tests:
    name: Staging Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success() && github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          for i in {1..30}; do
            if curl -f -s ${{ needs.deploy-staging.outputs.deployment_url }}/api/health > /dev/null; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i/30: Deployment not ready yet, waiting..."
            sleep 10
          done

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run staging E2E tests
        run: npm run test:e2e:staging
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-staging.outputs.deployment_url }}
          STAGING_TEST_USER: ${{ secrets.STAGING_TEST_USER }}
          STAGING_TEST_PASSWORD: ${{ secrets.STAGING_TEST_PASSWORD }}

      - name: Run API tests
        run: npm run test:api:staging
        env:
          API_BASE_URL: ${{ needs.deploy-staging.outputs.deployment_url }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success() && github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-staging.outputs.deployment_url }}
            ${{ needs.deploy-staging.outputs.deployment_url }}/studios
            ${{ needs.deploy-staging.outputs.deployment_url }}/profile-completion
          budgetPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Run custom performance tests
        run: npm run test:performance:staging
        env:
          PERFORMANCE_TEST_URL: ${{ needs.deploy-staging.outputs.deployment_url }}

  # Security testing
  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success() && github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ needs.deploy-staging.outputs.deployment_url }}
          rules_file_name: '.zap/rules.tsv'
          fail-action: false
          
      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: report_html.html
          retention-days: 7

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, staging-tests, performance-test, security-test]
    if: always()
    
    steps:
      - name: Generate deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = '${{ needs.deploy-staging.result }}';
            const testsStatus = '${{ needs.staging-tests.result }}';
            const performanceStatus = '${{ needs.performance-test.result }}';
            const securityStatus = '${{ needs.security-test.result }}';
            
            const getStatusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🚫';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const summary = `## 🚀 Staging Deployment Summary
            
            **Deployment URL:** ${{ needs.deploy-staging.outputs.deployment_url }}
            **Branch:** \`${{ github.ref_name }}\`
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            ### Results:
            ${getStatusEmoji(deploymentStatus)} **Deployment:** ${deploymentStatus}
            ${getStatusEmoji(testsStatus)} **E2E Tests:** ${testsStatus}
            ${getStatusEmoji(performanceStatus)} **Performance:** ${performanceStatus}
            ${getStatusEmoji(securityStatus)} **Security:** ${securityStatus}
            
            ### Next Steps:
            ${deploymentStatus === 'success' ? '- ✅ Ready for manual testing and review' : '- ❌ Fix deployment issues before proceeding'}
            ${testsStatus === 'success' ? '- ✅ All automated tests passed' : '- ⚠️ Review test failures'}
            ${performanceStatus === 'success' ? '- ✅ Performance benchmarks met' : '- ⚠️ Performance issues detected'}
            ${securityStatus === 'success' ? '- ✅ Security scan completed' : '- ⚠️ Security issues may need attention'}
            
            ---
            *Generated at: ${new Date().toISOString()}*`;
            
            console.log(summary);
            
            // Post summary to Slack if configured
            if (process.env.SLACK_WEBHOOK_URL) {
              console.log('Would post to Slack:', summary);
            }

      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ❌ **Staging deployment encountered issues**
            
            **URL:** ${{ needs.deploy-staging.outputs.deployment_url || 'N/A' }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** `${{ github.sha }}`
            
            **Failed Jobs:**
            ${{ needs.deploy-staging.result == 'failure' && '- Deployment' || '' }}
            ${{ needs.staging-tests.result == 'failure' && '- E2E Tests' || '' }}
            ${{ needs.performance-test.result == 'failure' && '- Performance Tests' || '' }}
            ${{ needs.security-test.result == 'failure' && '- Security Tests' || '' }}
            
            Please check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}