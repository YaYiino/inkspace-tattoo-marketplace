name: Enhanced Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop, main]
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'improvement/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'develop'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'

concurrency:
  group: preview-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  # Quick checks to fail fast
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      branch-type: ${{ steps.check.outputs.branch-type }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check deployment conditions
        id: check
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Determine branch type and deployment strategy
          if [[ $BRANCH_NAME == feature/* ]]; then
            echo "branch-type=feature" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == bugfix/* ]]; then
            echo "branch-type=bugfix" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == improvement/* ]]; then
            echo "branch-type=improvement" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME == develop ]]; then
            echo "branch-type=develop" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT  # develop has its own workflow
          else
            echo "branch-type=other" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for deployment blockers
        run: |
          # Check for [skip-deploy] in commit messages
          if git log --oneline -n 5 | grep -q "\[skip-deploy\]"; then
            echo "üö´ Found [skip-deploy] flag, skipping deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for WIP in PR title or branch name
          if [[ "${{ github.event.pull_request.title }}" == *"WIP"* ]] || [[ "${{ github.head_ref }}" == *"wip"* ]]; then
            echo "üöß WIP detected, skipping deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and test before deployment
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.outputs.should-deploy == 'true'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: preview
          NEXT_PUBLIC_APP_URL: https://preview-${{ github.head_ref || github.ref_name }}.antsss.com
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-preview-${{ github.sha }}
          path: .next
          retention-days: 1

  # Deploy to preview environment
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quick-validation, build-and-test]
    if: needs.quick-validation.outputs.should-deploy == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-preview-${{ github.sha }}
          path: .next

      - name: Generate deployment name
        id: deployment
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          # Convert branch name to valid subdomain
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          DEPLOYMENT_NAME="preview-$CLEAN_BRANCH"
          echo "deployment-name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
          echo "clean-branch=$CLEAN_BRANCH" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          
          # Deploy with specific alias
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          vercel alias set $DEPLOYMENT_URL ${{ steps.deployment.outputs.deployment-name }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "preview-url=https://${{ steps.deployment.outputs.deployment-name }}.vercel.app" >> $GITHUB_OUTPUT

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be accessible..."
          for i in {1..30}; do
            if curl -f -s "${{ steps.deploy.outputs.preview-url }}" > /dev/null; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i/30: Deployment not ready yet..."
            sleep 10
          done

      - name: Run health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.preview-url }}/api/health")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

  # Run E2E tests against preview deployment
  e2e-preview-test:
    name: E2E Preview Tests
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name == 'pull_request'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests against preview
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          PLAYWRIGHT_TEST_RESULTS_DIR: test-results-preview

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-preview-results
          path: test-results-preview/
          retention-days: 7

  # Performance and accessibility testing
  performance-test:
    name: Performance & A11y Tests
    runs-on: ubuntu-latest
    needs: deploy-preview
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
            ${{ needs.deploy-preview.outputs.preview-url }}/login
            ${{ needs.deploy-preview.outputs.preview-url }}/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './lighthouse.config.js'

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-preview
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ needs.deploy-preview.outputs.preview-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Comment on PR with deployment info
  comment-pr:
    name: Comment PR
    runs-on: ubuntu-latest
    needs: [quick-validation, deploy-preview, e2e-preview-test, performance-test]
    if: always() && github.event_name == 'pull_request' && needs.quick-validation.outputs.should-deploy == 'true'
    
    steps:
      - name: Find existing comment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'üöÄ Preview Deployment'

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## üöÄ Preview Deployment
            
            **Branch**: `${{ github.head_ref }}`
            **Commit**: `${{ github.sha }}`
            **Deployment Status**: ${{ needs.deploy-preview.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            
            ### üîó Preview Links
            - **App**: ${{ needs.deploy-preview.outputs.preview-url }}
            - **Storybook**: ${{ needs.deploy-preview.outputs.preview-url }}/storybook
            - **Health Check**: ${{ needs.deploy-preview.outputs.preview-url }}/api/health
            
            ### üìä Test Results
            - **Build**: ${{ needs.build-and-test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
            - **E2E Tests**: ${{ needs.e2e-preview-test.result == 'success' && '‚úÖ Passed' || needs.e2e-preview-test.result == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}
            - **Performance**: ${{ needs.performance-test.result == 'success' && '‚úÖ Passed' || needs.performance-test.result == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}
            - **Security**: ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || needs.security-scan.result == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}
            
            ### üéØ Quick Actions
            - [View Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Compare with Base Branch](${{ needs.deploy-preview.outputs.preview-url }})
            - [Run Manual Tests](${{ needs.deploy-preview.outputs.preview-url }})
            
            ---
            <sub>This preview will be automatically cleaned up when the PR is closed.</sub>

  # Cleanup on PR close
  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Generate deployment name
        id: deployment
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          DEPLOYMENT_NAME="preview-$CLEAN_BRANCH"
          echo "deployment-name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

      - name: Remove Vercel deployment
        run: |
          # Remove the alias
          vercel alias rm ${{ steps.deployment.outputs.deployment-name }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }} || true
          
          # Find and remove the deployment
          vercel list --token=${{ secrets.VERCEL_TOKEN }} | grep "${{ steps.deployment.outputs.deployment-name }}" | awk '{print $2}' | xargs -I {} vercel rm {} --yes --token=${{ secrets.VERCEL_TOKEN }} || true

      - name: Comment cleanup
        if: github.event.action == 'closed'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üßπ Preview Cleanup
            
            The preview deployment for this PR has been automatically cleaned up.
            
            - **Branch**: `${{ github.head_ref }}`
            - **Status**: Deployment removed
            
            Thank you for contributing to Antsss! üéâ