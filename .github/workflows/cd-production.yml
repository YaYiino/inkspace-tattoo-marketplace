name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}

jobs:
  # Run full CI pipeline
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Manual approval for production deployment
  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: [ci-checks]
    environment: production-approval
    
    steps:
      - name: Request approval
        run: echo "Manual approval required for production deployment"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ci-checks, approval]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt

      - name: Get deployment URL
        id: deployment
        run: echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          curl -f ${{ steps.deployment.outputs.url }}/api/health || exit 1
          echo "Production deployment health check passed"

  # Database migrations for production
  production-migrations:
    name: Production Migrations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production migrations
        run: |
          # Run database migrations for production
          echo "Production database migrations would run here"
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}

  # Post-deployment verification
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production, production-migrations]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run production smoke tests
        run: |
          # Run critical path tests
          npm run test:e2e -- --grep "@smoke"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-production.outputs.url }}

      - name: Run API health checks
        run: |
          curl -f ${{ needs.deploy-production.outputs.url }}/api/health
          curl -f ${{ needs.deploy-production.outputs.url }}/api/studios
          echo "API endpoints are healthy"

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    
    steps:
      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-production.outputs.url }}
            ${{ needs.deploy-production.outputs.url }}/studios
          budgetPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check Core Web Vitals
        run: |
          # Add Core Web Vitals monitoring
          echo "Core Web Vitals monitoring would run here"

  # Rollback capability
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production, post-deployment-tests]
    environment: production
    
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback logic here
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed and was rolled back'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Success notification
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests, performance-monitoring]
    
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}