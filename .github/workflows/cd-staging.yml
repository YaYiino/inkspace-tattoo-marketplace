name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

jobs:
  # Run CI checks first
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ci-checks]
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt

      - name: Get deployment URL
        id: deployment
        run: echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f ${{ steps.deployment.outputs.url }}/api/health || exit 1
          
      - name: Update staging database
        run: |
          # Run database migrations for staging
          echo "Database migrations would run here"
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Staging deployment ready: ${{ steps.deployment.outputs.url }}`
            })

  # Automated testing on staging
  staging-tests:
    name: Staging Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run staging E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.deploy-staging.outputs.url }}

      - name: Run API tests
        run: |
          # Add API testing logic here
          echo "API tests would run here"

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-staging.outputs.url }}
            ${{ needs.deploy-staging.outputs.url }}/studios
          budgetPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security testing
  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ needs.deploy-staging.outputs.url }}
          rules_file_name: '.zap/rules.tsv'